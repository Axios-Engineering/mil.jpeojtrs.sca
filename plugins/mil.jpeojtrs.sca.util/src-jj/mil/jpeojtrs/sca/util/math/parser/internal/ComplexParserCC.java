/* Generated By:JavaCC: Do not edit this line. ComplexParserCC.java */
package mil.jpeojtrs.sca.util.math.parser.internal;
import java.io.StringReader;
import java.util.*;

public class ComplexParserCC implements ComplexParserCCConstants {
  public static String [] fromString(String stringToParse) throws ParseException
  {
    StringReader stringReader = new StringReader(stringToParse.toLowerCase() + "\u005cn");
    ComplexParserCC parser = new ComplexParserCC(stringReader);
    return parser.parse();
  }

  /**
     * A very basic usage of the program in which the first argument from the command line gets
     * translated and printed out.
     */
  public static void main(String args [])
  {
    try
    {
      System.out.println("Returned: " + fromString(args [0]));
    }
    catch (Throwable t)
    {
      System.out.println(t);
    }
  }

  final public String [ ] parse() throws ParseException {
  String [ ] retVal = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case FLOATONE:
    case FLOATTWO:
      retVal = complexEquation();
      break;
    case 2:
      retVal = vector();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String [ ] vector() throws ParseException {
  List < String > retVal = new ArrayList < String > ();
  String number;
    jj_consume_token(2);
    number = real_number();
    retVal.add(number);
    label_1:
    while (true) {
      jj_consume_token(3);
      number = real_number();
      retVal.add(number);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 3:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(4);
    {if (true) return retVal.toArray(new String [ retVal.size() ]);}
    throw new Error("Missing return statement in function");
  }

  final public String [ ] complexEquation() throws ParseException {
  String [ ] retVal = new String [ 2 ];
  boolean negative;
    retVal [ 0 ] = real_number();
    negative = sign();
    retVal [ 1 ] = complexNumber(negative);
    {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public String complexNumber(boolean negative) throws ParseException {
  String retVal = "1";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      {if (true) return complexNumber(!negative);}
      break;
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case FLOATONE:
    case FLOATTWO:
      retVal = number();
      jj_consume_token(COMPLEX_MARKER);
      break;
    case COMPLEX_MARKER:
      jj_consume_token(COMPLEX_MARKER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OCTALINT:
      case DECIMALINT:
      case HEXADECIMALINT:
      case FLOATONE:
      case FLOATTWO:
        retVal = number();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (negative)
    {
      {if (true) return "-" + retVal;}
    }
    {if (true) return retVal;}
    throw new Error("Missing return statement in function");
  }

  final public boolean sign() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 6:
      jj_consume_token(6);
    {if (true) return false;}
      break;
    case 5:
      jj_consume_token(5);
    {if (true) return true;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String real_number() throws ParseException {
  boolean negative = false;
  String retVal;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 5:
      jj_consume_token(5);
      negative = true;
      retVal = number();
      break;
    case OCTALINT:
    case DECIMALINT:
    case HEXADECIMALINT:
    case FLOATONE:
    case FLOATTWO:
      retVal = number();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (negative)
    {
      {if (true) return "-" + retVal;}
    }
    else
    {
      {if (true) return retVal;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
      jj_consume_token(OCTALINT);
    {if (true) return token.image;}
      break;
    case DECIMALINT:
      jj_consume_token(DECIMALINT);
    {if (true) return token.image;}
      break;
    case HEXADECIMALINT:
      jj_consume_token(HEXADECIMALINT);
    {if (true) return token.image;}
      break;
    case FLOATONE:
      jj_consume_token(FLOATONE);
    {if (true) return token.image;}
      break;
    case FLOATTWO:
      jj_consume_token(FLOATTWO);
    {if (true) return token.image;}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ComplexParserCCTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1f24,0x8,0x1f00,0x1fa0,0x60,0x1f20,0x1f00,};
   }

  /** Constructor with InputStream. */
  public ComplexParserCC(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ComplexParserCC(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ComplexParserCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ComplexParserCC(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ComplexParserCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ComplexParserCC(ComplexParserCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ComplexParserCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[15];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 15; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
