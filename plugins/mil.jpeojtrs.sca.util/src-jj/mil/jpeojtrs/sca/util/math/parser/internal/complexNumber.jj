options{  STATIC = false;}PARSER_BEGIN(ComplexParserCC)package mil.jpeojtrs.sca.util.math.parser.internal;import java.io.StringReader;import java.util.*;public class ComplexParserCC{  public static String [] fromString(String stringToParse) throws ParseException  {    StringReader stringReader = new StringReader(stringToParse.toLowerCase().trim());    ComplexParserCC parser = new ComplexParserCC(stringReader);    return parser.parse();  }  /**
     * A very basic usage of the program in which the first argument from the command line gets
     * translated and printed out.
     */  public static void main(String args [])  {    try    {      System.out.println("Returned: " + fromString(args [0]));    }    catch (Throwable t)    {      System.out.println(t);    }  }}PARSER_END(ComplexParserCC)/* WHITE SPACE */SKIP :{  " "}String [ ] parse() :{  String [ ] retVal;  boolean negative = false;}{  (    retVal = number()  | retVal = vector()  )  {    return retVal;  }}String [ ] number() :{  String [ ] retVal = new String [ ]  {    "0", "0"  }  ;  String tmp;  boolean negative = false;}{  (    negative = negativeModifier(negative)  )?  (    < COMPLEX_MARKER >    {      if (negative)      {        retVal [ 1 ] = "-1";      }      else      {        retVal [ 1 ] = "1";      }    }    (      retVal [ 1 ] = signed_number_literal(negative)    )?  | retVal [ 0 ] = signed_number_literal(negative)    (      < COMPLEX_MARKER >      {        retVal [ 1 ] = retVal [ 0 ];        retVal [ 0 ] = "0";      }    | negative = sign()      (        negative = negativeModifier(negative)      )?      (        < COMPLEX_MARKER >        {          if (negative)          {            retVal [ 1 ] = "-1";          }          else          {            retVal [ 1 ] = "1";          }        }        (          retVal [ 1 ] = signed_number_literal(negative)        )?      | retVal [ 1 ] = signed_number_literal(negative) < COMPLEX_MARKER >      )    )?  )  {    return retVal;  }}boolean negativeModifier(boolean negative) :{}{  "-"  {    return !negative;  }}String [ ] vector() :{  List < String > retVal = new ArrayList < String > ();  String number;  boolean negative = false;}{  "("  (    negative = negativeModifier(false)  )?  number = real_number(negative)  {    retVal.add(number);  }  (    ","    (      negative = negativeModifier(false)    )?    number = real_number(negative)    {      retVal.add(number);    }  )+  ")"  {    return retVal.toArray(new String [ retVal.size() ]);  }}boolean sign() :{}{  "+"  {    return false;  }| "-"  {    return true;  }}String real_number(boolean negative) :{  String retVal;}{  retVal = number_literal()  {    if (negative)    {      return "-" + retVal;    }    else    {      return retVal;    }  }}String signed_number_literal(boolean negative) :{  String retVal = "0";}{  retVal = number_literal()  {    if (negative)    {      return "-" + retVal;    }    else    {      return retVal;    }  }}String number_literal() :{}{  < OCTALINT >  {    return token.image;  }| < DECIMALINT >  {    return token.image;  }| < HEXADECIMALINT >  {    return token.image;  }| < FLOATONE >  {    return token.image;  }| < FLOATTWO >  {    return token.image;  }}TOKEN [ IGNORE_CASE ] :{  < COMPLEX_MARKER :    [ "i", "j" ]    (      "\n"    | "\r"    | "\r\n"    )? >}/* Definitions of complex regular expressions follow */TOKEN [ IGNORE_CASE ] :{  < OCTALINT : "0" ([ "0"-"7" ])* >| < DECIMALINT : [ "1"-"9" ] ([ "0"-"9" ])* >| < HEXADECIMALINT :    (      "0x"    | "0X"    )    ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < FLOATONE :    (      ([ "0"-"9" ])+ "." ([ "0"-"9" ])*    | ([ "0"-"9" ])* "." ([ "0"-"9" ])+    )    (      [ "e", "E" ] ([ "-", "+" ])? ([ "0"-"9" ])+    )? >| < FLOATTWO : ([ "0"-"9" ])+ [ "e", "E" ] ([ "-", "+" ])? ([ "0"-"9" ])+ >| < CHARACTER :    "'"    (      (~[ "'", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "v", "b", "r", "f", "a", "\\", "?", "'", "\"" ]        | "0" ([ "0"-"7" ])*        | [ "1"-"9" ] ([ "0"-"9" ])*        |          (            "0x"          | "0X"          )          ([ "0"-"9", "a"-"f", "A"-"F" ])+        )      )    )    "'" >| < STRING :    "\""    (      (~[ "\"", "\\", "\n", "\r" ])    |      (        "\\"        (          [ "n", "t", "v", "b", "r", "f", "a", "\\", "?", "'", "\"" ]        | "0" ([ "0"-"7" ])*        | [ "1"-"9" ] ([ "0"-"9" ])*        |          (            "0x"          | "0X"          )          ([ "0"-"9", "a"-"f", "A"-"F" ])+        )      )    )*    "\"" >}