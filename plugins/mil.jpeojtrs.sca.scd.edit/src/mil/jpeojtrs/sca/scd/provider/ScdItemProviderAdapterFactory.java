/*******************************************************************************
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at 
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/
// BEGIN GENERATED CODE
package mil.jpeojtrs.sca.scd.provider;

import java.util.ArrayList;
import java.util.Collection;

import mil.jpeojtrs.sca.scd.util.ScdAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITableItemLabelProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScdItemProviderAdapterFactory extends ScdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated NOT
	 */
	public ScdItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(ITableItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.ComponentFeatures} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentFeaturesItemProvider componentFeaturesItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.ComponentFeatures}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentFeaturesAdapter() {
		if (componentFeaturesItemProvider == null)
		{
			componentFeaturesItemProvider = new ComponentFeaturesItemProvider(this);
		}

		return componentFeaturesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.ComponentRepId} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentRepIdItemProvider componentRepIdItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.ComponentRepId}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentRepIdAdapter() {
		if (componentRepIdItemProvider == null)
		{
			componentRepIdItemProvider = new ComponentRepIdItemProvider(this);
		}

		return componentRepIdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.InheritsInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InheritsInterfaceItemProvider inheritsInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.InheritsInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInheritsInterfaceAdapter() {
		if (inheritsInterfaceItemProvider == null)
		{
			inheritsInterfaceItemProvider = new InheritsInterfaceItemProvider(this);
		}

		return inheritsInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null)
		{
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.Interfaces} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfacesItemProvider interfacesItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.Interfaces}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfacesAdapter() {
		if (interfacesItemProvider == null)
		{
			interfacesItemProvider = new InterfacesItemProvider(this);
		}

		return interfacesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.LocalFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LocalFileItemProvider localFileItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.LocalFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLocalFileAdapter() {
		if (localFileItemProvider == null)
		{
			localFileItemProvider = new LocalFileItemProvider(this);
		}

		return localFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.Ports} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortsItemProvider portsItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.Ports}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortsAdapter() {
		if (portsItemProvider == null)
		{
			portsItemProvider = new PortsItemProvider(this);
		}

		return portsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.PortTypeContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortTypeContainerItemProvider portTypeContainerItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.PortTypeContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortTypeContainerAdapter() {
		if (portTypeContainerItemProvider == null)
		{
			portTypeContainerItemProvider = new PortTypeContainerItemProvider(this);
		}

		return portTypeContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.PropertyFile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyFileItemProvider propertyFileItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.PropertyFile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyFileAdapter() {
		if (propertyFileItemProvider == null)
		{
			propertyFileItemProvider = new PropertyFileItemProvider(this);
		}

		return propertyFileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.Provides} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProvidesItemProvider providesItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.Provides}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProvidesAdapter() {
		if (providesItemProvider == null)
		{
			providesItemProvider = new ProvidesItemProvider(this);
		}

		return providesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.ScdDocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScdDocumentRootItemProvider scdDocumentRootItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.ScdDocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScdDocumentRootAdapter() {
		if (scdDocumentRootItemProvider == null)
		{
			scdDocumentRootItemProvider = new ScdDocumentRootItemProvider(this);
		}

		return scdDocumentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.SoftwareComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SoftwareComponentItemProvider softwareComponentItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.SoftwareComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSoftwareComponentAdapter() {
		if (softwareComponentItemProvider == null)
		{
			softwareComponentItemProvider = new SoftwareComponentItemProvider(this);
		}

		return softwareComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.SupportsInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SupportsInterfaceItemProvider supportsInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.SupportsInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSupportsInterfaceAdapter() {
		if (supportsInterfaceItemProvider == null)
		{
			supportsInterfaceItemProvider = new SupportsInterfaceItemProvider(this);
		}

		return supportsInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link mil.jpeojtrs.sca.scd.Uses} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UsesItemProvider usesItemProvider;

	/**
	 * This creates an adapter for a {@link mil.jpeojtrs.sca.scd.Uses}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUsesAdapter() {
		if (usesItemProvider == null)
		{
			usesItemProvider = new UsesItemProvider(this);
		}

		return usesItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type))
		{
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter)))
			{
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null)
		{
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (componentFeaturesItemProvider != null) componentFeaturesItemProvider.dispose();
		if (componentRepIdItemProvider != null) componentRepIdItemProvider.dispose();
		if (inheritsInterfaceItemProvider != null) inheritsInterfaceItemProvider.dispose();
		if (interfaceItemProvider != null) interfaceItemProvider.dispose();
		if (interfacesItemProvider != null) interfacesItemProvider.dispose();
		if (localFileItemProvider != null) localFileItemProvider.dispose();
		if (portsItemProvider != null) portsItemProvider.dispose();
		if (portTypeContainerItemProvider != null) portTypeContainerItemProvider.dispose();
		if (propertyFileItemProvider != null) propertyFileItemProvider.dispose();
		if (providesItemProvider != null) providesItemProvider.dispose();
		if (scdDocumentRootItemProvider != null) scdDocumentRootItemProvider.dispose();
		if (softwareComponentItemProvider != null) softwareComponentItemProvider.dispose();
		if (supportsInterfaceItemProvider != null) supportsInterfaceItemProvider.dispose();
		if (usesItemProvider != null) usesItemProvider.dispose();
	}

}
