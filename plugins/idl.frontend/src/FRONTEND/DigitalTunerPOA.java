package FRONTEND;


/**
* FRONTEND/DigitalTunerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /data/Workspaces/dev_1-10_workspace/mil.jpeojtrs.sca/plugins/idl.frontend/idl/redhawk/FRONTEND/TunerControl.idl
* Wednesday, December 18, 2013 5:32:24 PM EST
*/

public abstract class DigitalTunerPOA extends org.omg.PortableServer.Servant
 implements FRONTEND.DigitalTunerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("setTunerOutputSampleRate", new java.lang.Integer (0));
    _methods.put ("getTunerOutputSampleRate", new java.lang.Integer (1));
    _methods.put ("setTunerCenterFrequency", new java.lang.Integer (2));
    _methods.put ("getTunerCenterFrequency", new java.lang.Integer (3));
    _methods.put ("setTunerBandwidth", new java.lang.Integer (4));
    _methods.put ("getTunerBandwidth", new java.lang.Integer (5));
    _methods.put ("setTunerAgcEnable", new java.lang.Integer (6));
    _methods.put ("getTunerAgcEnable", new java.lang.Integer (7));
    _methods.put ("setTunerGain", new java.lang.Integer (8));
    _methods.put ("getTunerGain", new java.lang.Integer (9));
    _methods.put ("setTunerReferenceSource", new java.lang.Integer (10));
    _methods.put ("getTunerReferenceSource", new java.lang.Integer (11));
    _methods.put ("setTunerEnable", new java.lang.Integer (12));
    _methods.put ("getTunerEnable", new java.lang.Integer (13));
    _methods.put ("getTunerType", new java.lang.Integer (14));
    _methods.put ("getTunerDeviceControl", new java.lang.Integer (15));
    _methods.put ("getTunerGroupId", new java.lang.Integer (16));
    _methods.put ("getTunerRfFlowId", new java.lang.Integer (17));
    _methods.put ("getTunerStatus", new java.lang.Integer (18));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**  Set output sample rate  */
       case 0:  // FRONTEND/DigitalTuner/setTunerOutputSampleRate
       {
         try {
           String id = in.read_string ();
           double sr = in.read_double ();
           this.setTunerOutputSampleRate (id, sr);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // FRONTEND/DigitalTuner/getTunerOutputSampleRate
       {
         try {
           String id = in.read_string ();
           double $result = (double)0;
           $result = this.getTunerOutputSampleRate (id);
           out = $rh.createReply();
           out.write_double ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Set/Get tuner center frequency */
       case 2:  // FRONTEND/AnalogTuner/setTunerCenterFrequency
       {
         try {
           String id = in.read_string ();
           double freq = in.read_double ();
           this.setTunerCenterFrequency (id, freq);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // FRONTEND/AnalogTuner/getTunerCenterFrequency
       {
         try {
           String id = in.read_string ();
           double $result = (double)0;
           $result = this.getTunerCenterFrequency (id);
           out = $rh.createReply();
           out.write_double ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**  Set/Get tuner bandwidth */
       case 4:  // FRONTEND/AnalogTuner/setTunerBandwidth
       {
         try {
           String id = in.read_string ();
           double bw = in.read_double ();
           this.setTunerBandwidth (id, bw);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 5:  // FRONTEND/AnalogTuner/getTunerBandwidth
       {
         try {
           String id = in.read_string ();
           double $result = (double)0;
           $result = this.getTunerBandwidth (id);
           out = $rh.createReply();
           out.write_double ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**  MGC/AGC  */
       case 6:  // FRONTEND/AnalogTuner/setTunerAgcEnable
       {
         try {
           String id = in.read_string ();
           boolean enable = in.read_boolean ();
           this.setTunerAgcEnable (id, enable);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 7:  // FRONTEND/AnalogTuner/getTunerAgcEnable
       {
         try {
           String id = in.read_string ();
           boolean $result = false;
           $result = this.getTunerAgcEnable (id);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**  MGC Gain (where negative gain is attentuation)*/
       case 8:  // FRONTEND/AnalogTuner/setTunerGain
       {
         try {
           String id = in.read_string ();
           float gain = in.read_float ();
           this.setTunerGain (id, gain);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 9:  // FRONTEND/AnalogTuner/getTunerGain
       {
         try {
           String id = in.read_string ();
           float $result = (float)0;
           $result = this.getTunerGain (id);
           out = $rh.createReply();
           out.write_float ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**  Tuner Reference Source: 0 = internal,  1 = external*/
       case 10:  // FRONTEND/AnalogTuner/setTunerReferenceSource
       {
         try {
           String id = in.read_string ();
           int source = in.read_long ();
           this.setTunerReferenceSource (id, source);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 11:  // FRONTEND/AnalogTuner/getTunerReferenceSource
       {
         try {
           String id = in.read_string ();
           int $result = (int)0;
           $result = this.getTunerReferenceSource (id);
           out = $rh.createReply();
           out.write_long ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /**  Enable/Disable Tuner - Expected to keep current tuner settings on a disable and an EOS to be sent */
       case 12:  // FRONTEND/AnalogTuner/setTunerEnable
       {
         try {
           String id = in.read_string ();
           boolean enable = in.read_boolean ();
           this.setTunerEnable (id, enable);
           out = $rh.createReply();
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 13:  // FRONTEND/AnalogTuner/getTunerEnable
       {
         try {
           String id = in.read_string ();
           boolean $result = false;
           $result = this.getTunerEnable (id);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Get the type of tuner (ie- RX or DDC) associated with this allocation id*/
       case 14:  // FRONTEND/FrontendTuner/getTunerType
       {
         try {
           String id = in.read_string ();
           String $result = null;
           $result = this.getTunerType (id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Returns whether this allocation id has control (modification privledges) over the tuner*/
       case 15:  // FRONTEND/FrontendTuner/getTunerDeviceControl
       {
         try {
           String id = in.read_string ();
           boolean $result = false;
           $result = this.getTunerDeviceControl (id);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Retrieves the group id (may be empty) for this allocation id */
       case 16:  // FRONTEND/FrontendTuner/getTunerGroupId
       {
         try {
           String id = in.read_string ();
           String $result = null;
           $result = this.getTunerGroupId (id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Retrieves the rf flow id (may be empty) for this allocation id */
       case 17:  // FRONTEND/FrontendTuner/getTunerRfFlowId
       {
         try {
           String id = in.read_string ();
           String $result = null;
           $result = this.getTunerRfFlowId (id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Key/Value pair of entire tuner status structure */
       case 18:  // FRONTEND/FrontendTuner/getTunerStatus
       {
         try {
           String id = in.read_string ();
           CF.DataType $result[] = null;
           $result = this.getTunerStatus (id);
           out = $rh.createReply();
           CF.PropertiesHelper.write (out, $result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FRONTEND/DigitalTuner:1.0", 
    "IDL:FRONTEND/AnalogTuner:1.0", 
    "IDL:FRONTEND/FrontendTuner:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public DigitalTuner _this() 
  {
    return DigitalTunerHelper.narrow(
    super._this_object());
  }

  public DigitalTuner _this(org.omg.CORBA.ORB orb) 
  {
    return DigitalTunerHelper.narrow(
    super._this_object(orb));
  }


} // class DigitalTunerPOA
