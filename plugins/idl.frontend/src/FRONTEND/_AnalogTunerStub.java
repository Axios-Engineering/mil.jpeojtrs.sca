package FRONTEND;


/**
* FRONTEND/_AnalogTunerStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /data/Workspaces/dev_1-10_workspace/mil.jpeojtrs.sca/plugins/idl.frontend/idl/redhawk/FRONTEND/TunerControl.idl
* Wednesday, December 18, 2013 5:32:24 PM EST
*/

public class _AnalogTunerStub extends org.omg.CORBA.portable.ObjectImpl implements FRONTEND.AnalogTuner
{


  /** Set/Get tuner center frequency */
  public void setTunerCenterFrequency (String id, double freq) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTunerCenterFrequency", true);
                $out.write_string (id);
                $out.write_double (freq);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTunerCenterFrequency (id, freq        );
            } finally {
                _releaseReply ($in);
            }
  } // setTunerCenterFrequency

  public double getTunerCenterFrequency (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerCenterFrequency", true);
                $out.write_string (id);
                $in = _invoke ($out);
                double $result = $in.read_double ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerCenterFrequency (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerCenterFrequency


  /**  Set/Get tuner bandwidth */
  public void setTunerBandwidth (String id, double bw) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTunerBandwidth", true);
                $out.write_string (id);
                $out.write_double (bw);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTunerBandwidth (id, bw        );
            } finally {
                _releaseReply ($in);
            }
  } // setTunerBandwidth

  public double getTunerBandwidth (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerBandwidth", true);
                $out.write_string (id);
                $in = _invoke ($out);
                double $result = $in.read_double ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerBandwidth (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerBandwidth


  /**  MGC/AGC  */
  public void setTunerAgcEnable (String id, boolean enable) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTunerAgcEnable", true);
                $out.write_string (id);
                $out.write_boolean (enable);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTunerAgcEnable (id, enable        );
            } finally {
                _releaseReply ($in);
            }
  } // setTunerAgcEnable

  public boolean getTunerAgcEnable (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerAgcEnable", true);
                $out.write_string (id);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerAgcEnable (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerAgcEnable


  /**  MGC Gain (where negative gain is attentuation)*/
  public void setTunerGain (String id, float gain) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTunerGain", true);
                $out.write_string (id);
                $out.write_float (gain);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTunerGain (id, gain        );
            } finally {
                _releaseReply ($in);
            }
  } // setTunerGain

  public float getTunerGain (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerGain", true);
                $out.write_string (id);
                $in = _invoke ($out);
                float $result = $in.read_float ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerGain (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerGain


  /**  Tuner Reference Source: 0 = internal,  1 = external*/
  public void setTunerReferenceSource (String id, int source) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTunerReferenceSource", true);
                $out.write_string (id);
                $out.write_long (source);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTunerReferenceSource (id, source        );
            } finally {
                _releaseReply ($in);
            }
  } // setTunerReferenceSource

  public int getTunerReferenceSource (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerReferenceSource", true);
                $out.write_string (id);
                $in = _invoke ($out);
                int $result = $in.read_long ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerReferenceSource (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerReferenceSource


  /**  Enable/Disable Tuner - Expected to keep current tuner settings on a disable and an EOS to be sent */
  public void setTunerEnable (String id, boolean enable) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("setTunerEnable", true);
                $out.write_string (id);
                $out.write_boolean (enable);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                setTunerEnable (id, enable        );
            } finally {
                _releaseReply ($in);
            }
  } // setTunerEnable

  public boolean getTunerEnable (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerEnable", true);
                $out.write_string (id);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerEnable (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerEnable


  /** Get the type of tuner (ie- RX or DDC) associated with this allocation id*/
  public String getTunerType (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerType", true);
                $out.write_string (id);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerType (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerType


  /** Returns whether this allocation id has control (modification privledges) over the tuner*/
  public boolean getTunerDeviceControl (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerDeviceControl", true);
                $out.write_string (id);
                $in = _invoke ($out);
                boolean $result = $in.read_boolean ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerDeviceControl (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerDeviceControl


  /** Retrieves the group id (may be empty) for this allocation id */
  public String getTunerGroupId (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerGroupId", true);
                $out.write_string (id);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerGroupId (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerGroupId


  /** Retrieves the rf flow id (may be empty) for this allocation id */
  public String getTunerRfFlowId (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerRfFlowId", true);
                $out.write_string (id);
                $in = _invoke ($out);
                String $result = $in.read_string ();
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerRfFlowId (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerRfFlowId


  /** Key/Value pair of entire tuner status structure */
  public CF.DataType[] getTunerStatus (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getTunerStatus", true);
                $out.write_string (id);
                $in = _invoke ($out);
                CF.DataType $result[] = CF.PropertiesHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                if (_id.equals ("IDL:FRONTEND/FrontendException:1.0"))
                    throw FRONTEND.FrontendExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/BadParameterException:1.0"))
                    throw FRONTEND.BadParameterExceptionHelper.read ($in);
                else if (_id.equals ("IDL:FRONTEND/NotSupportedException:1.0"))
                    throw FRONTEND.NotSupportedExceptionHelper.read ($in);
                else
                    throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getTunerStatus (id        );
            } finally {
                _releaseReply ($in);
            }
  } // getTunerStatus

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FRONTEND/AnalogTuner:1.0", 
    "IDL:FRONTEND/FrontendTuner:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _AnalogTunerStub
