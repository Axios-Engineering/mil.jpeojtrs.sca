package FRONTEND;


/**
* FRONTEND/FrontendTunerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /data/Workspaces/dev_1-10_workspace/mil.jpeojtrs.sca/plugins/idl.frontend/idl/redhawk/FRONTEND/TunerControl.idl
* Wednesday, December 18, 2013 5:32:24 PM EST
*/


/*************************/
public abstract class FrontendTunerPOA extends org.omg.PortableServer.Servant
 implements FRONTEND.FrontendTunerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("getTunerType", new java.lang.Integer (0));
    _methods.put ("getTunerDeviceControl", new java.lang.Integer (1));
    _methods.put ("getTunerGroupId", new java.lang.Integer (2));
    _methods.put ("getTunerRfFlowId", new java.lang.Integer (3));
    _methods.put ("getTunerStatus", new java.lang.Integer (4));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /** Get the type of tuner (ie- RX or DDC) associated with this allocation id*/
       case 0:  // FRONTEND/FrontendTuner/getTunerType
       {
         try {
           String id = in.read_string ();
           String $result = null;
           $result = this.getTunerType (id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Returns whether this allocation id has control (modification privledges) over the tuner*/
       case 1:  // FRONTEND/FrontendTuner/getTunerDeviceControl
       {
         try {
           String id = in.read_string ();
           boolean $result = false;
           $result = this.getTunerDeviceControl (id);
           out = $rh.createReply();
           out.write_boolean ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Retrieves the group id (may be empty) for this allocation id */
       case 2:  // FRONTEND/FrontendTuner/getTunerGroupId
       {
         try {
           String id = in.read_string ();
           String $result = null;
           $result = this.getTunerGroupId (id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Retrieves the rf flow id (may be empty) for this allocation id */
       case 3:  // FRONTEND/FrontendTuner/getTunerRfFlowId
       {
         try {
           String id = in.read_string ();
           String $result = null;
           $result = this.getTunerRfFlowId (id);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }


  /** Key/Value pair of entire tuner status structure */
       case 4:  // FRONTEND/FrontendTuner/getTunerStatus
       {
         try {
           String id = in.read_string ();
           CF.DataType $result[] = null;
           $result = this.getTunerStatus (id);
           out = $rh.createReply();
           CF.PropertiesHelper.write (out, $result);
         } catch (FRONTEND.FrontendException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.FrontendExceptionHelper.write (out, $ex);
         } catch (FRONTEND.BadParameterException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.BadParameterExceptionHelper.write (out, $ex);
         } catch (FRONTEND.NotSupportedException $ex) {
           out = $rh.createExceptionReply ();
           FRONTEND.NotSupportedExceptionHelper.write (out, $ex);
         }
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FRONTEND/FrontendTuner:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public FrontendTuner _this() 
  {
    return FrontendTunerHelper.narrow(
    super._this_object());
  }

  public FrontendTuner _this(org.omg.CORBA.ORB orb) 
  {
    return FrontendTunerHelper.narrow(
    super._this_object(orb));
  }


} // class FrontendTunerPOA
