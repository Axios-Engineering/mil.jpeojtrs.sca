package FRONTEND;


/**
* FRONTEND/FrontendTunerPOATie.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /data/Workspaces/dev_1-10_workspace/mil.jpeojtrs.sca/plugins/idl.frontend/idl/redhawk/FRONTEND/TunerControl.idl
* Wednesday, December 18, 2013 5:32:24 PM EST
*/


/*************************/
public class FrontendTunerPOATie extends FrontendTunerPOA
{

  // Constructors

  public FrontendTunerPOATie ( FRONTEND.FrontendTunerOperations delegate ) {
      this._impl = delegate;
  }
  public FrontendTunerPOATie ( FRONTEND.FrontendTunerOperations delegate , org.omg.PortableServer.POA poa ) {
      this._impl = delegate;
      this._poa      = poa;
  }
  public FRONTEND.FrontendTunerOperations _delegate() {
      return this._impl;
  }
  public void _delegate (FRONTEND.FrontendTunerOperations delegate ) {
      this._impl = delegate;
  }
  public org.omg.PortableServer.POA _default_POA() {
      if(_poa != null) {
          return _poa;
      }
      else {
          return super._default_POA();
      }
  }

  /** Get the type of tuner (ie- RX or DDC) associated with this allocation id*/
  public String getTunerType (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
    return _impl.getTunerType(id);
  } // getTunerType


  /** Returns whether this allocation id has control (modification privledges) over the tuner*/
  public boolean getTunerDeviceControl (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
    return _impl.getTunerDeviceControl(id);
  } // getTunerDeviceControl


  /** Retrieves the group id (may be empty) for this allocation id */
  public String getTunerGroupId (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
    return _impl.getTunerGroupId(id);
  } // getTunerGroupId


  /** Retrieves the rf flow id (may be empty) for this allocation id */
  public String getTunerRfFlowId (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
    return _impl.getTunerRfFlowId(id);
  } // getTunerRfFlowId


  /** Key/Value pair of entire tuner status structure */
  public CF.DataType[] getTunerStatus (String id) throws FRONTEND.FrontendException, FRONTEND.BadParameterException, FRONTEND.NotSupportedException
  {
    return _impl.getTunerStatus(id);
  } // getTunerStatus

  private FRONTEND.FrontendTunerOperations _impl;
  private org.omg.PortableServer.POA _poa;

} // class FrontendTunerPOATie
