package FRONTEND;


/**
* FRONTEND/_RFSourceStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /data/Workspaces/dev_1-10_workspace/mil.jpeojtrs.sca/plugins/idl.frontend/idl/redhawk/FRONTEND/RFInfo.idl
* Wednesday, December 18, 2013 5:32:24 PM EST
*/


/*********************************/
public class _RFSourceStub extends org.omg.CORBA.portable.ObjectImpl implements FRONTEND.RFSource
{


  /** A list of all possible rf inputs that this source could switch to **/
  public FRONTEND.RFInfoPkt[] available_rf_inputs ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_available_rf_inputs", true);
                $in = _invoke ($out);
                FRONTEND.RFInfoPkt $result[] = FRONTEND.RFInfoPktSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return available_rf_inputs (        );
            } finally {
                _releaseReply ($in);
            }
  } // available_rf_inputs


  /** A list of all possible rf inputs that this source could switch to **/
  public void available_rf_inputs (FRONTEND.RFInfoPkt[] newAvailable_rf_inputs)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_available_rf_inputs", true);
                FRONTEND.RFInfoPktSequenceHelper.write ($out, newAvailable_rf_inputs);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                available_rf_inputs (newAvailable_rf_inputs        );
            } finally {
                _releaseReply ($in);
            }
  } // available_rf_inputs


  /** The current select source that is being output **/
  public FRONTEND.RFInfoPkt current_rf_input ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_current_rf_input", true);
                $in = _invoke ($out);
                FRONTEND.RFInfoPkt $result = FRONTEND.RFInfoPktHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return current_rf_input (        );
            } finally {
                _releaseReply ($in);
            }
  } // current_rf_input


  /** The current select source that is being output **/
  public void current_rf_input (FRONTEND.RFInfoPkt newCurrent_rf_input)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_set_current_rf_input", true);
                FRONTEND.RFInfoPktHelper.write ($out, newCurrent_rf_input);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                current_rf_input (newCurrent_rf_input        );
            } finally {
                _releaseReply ($in);
            }
  } // current_rf_input

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:FRONTEND/RFSource:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _RFSourceStub
